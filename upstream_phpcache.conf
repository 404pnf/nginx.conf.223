fastcgi_cache phpcache;
#fastcgi_cache_key   $host$request_uri;
fastcgi_cache_key   $http_cookie$host$request_uri;


# syntax: fastcgi_cache_path path [levels=m:n] keys_zone=name:size [inactive=time] [max_size=size]
fastcgi_cache_path   /usr/local/nginx/fastcgi_temp  levels=1:2   keys_zone=phpcache:500m;

# default is GET HEAD
# Be advised that a HEAD request can cause an empty response to 
# be cached & later be distributed to GET requests, 
# avoid this by having $request_method in the cache key.
# default is GET HEAD
fastcgi_cache_methods   GET

# fastcgi_cache_min_uses
# syntax: fastcgi_cache_min_uses n
# 
# default: fastcgi_cache_min_uses 1
# 
# context: http, server, location
# 
# Directive specifies after how many requests to the same URL in will be cached.


# fastcgi_cache_use_stale	 
# syntax: fastcgi_cache_use_stale updating|error|timeout|invalid_header|http_500
# 
# default: fastcgi_cache_use_stale off
# 
# context: http, server, location
# 
# Determines whether or not Nginx will serve stale cached data in case of gateway event such as error, timeout etc.

## If there are any upstream errors or the item has expired use
## whatever it is available.
fastcgi_cache_use_stale error timeout invalid_header updating http_500;
## The Cache-Control and Expires headers should be delivered untouched
## from the upstream to the client.
fastcgi_ignore_headers Cache-Control Expires;
## If we have a cookie we should bypass the cache. The same if we have a
fastcgi_cache_bypass $no_cache;
fastcgi_no_cache $no_cache;
## Add a cache miss/hit status header.
add_header X-Micro-Cache $upstream_cache_status;
## To avoid any interaction with the cache control headers we expire
## everything on this location immediately.
expires epoch;

# fastcgi_cache_valid
# syntax: fastcgi_cache_valid [http_return_code [...]] time
# 
# default: none
# 
# context: http, server, location
# 
# Directive sets caching period for the specified http return codes. For example:
# 
# fastcgi_cache_valid  200 302  10m;
# fastcgi_cache_valid  404      1m;
# sets caching period of 10 minutes for return codes 200 and 302 and 1 minute for the 404 code.
# 
# In case only caching period is specified:
# 
# fastcgi_cache_valid  5m;
# the default behavior is to cache only replies with the codes 200, 301 and 302.
# 
# It's also possible to cache all the replies by specifying code "any":
fastcgi_cache_valid  200 302 10m;
fastcgi_cache_valid  301 1h;
fastcgi_cache_valid  any 1m;


